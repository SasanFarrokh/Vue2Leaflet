{"version":3,"file":"vue2-leaflet.min.js","sources":["../src/utils/findRealParent.js","../src/utils/propsBinder.js","../src/utils/Leaflet.js"],"sourcesContent":["export default (firstVueParent) => {\n  let found = false\n  while (!found) {\n    if (firstVueParent.mapObject == undefined) {\n      firstVueParent = firstVueParent.$parent;\n    } else {\n      found = true;\n    }\n  }\n  return firstVueParent;\n}\n","function capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nexport default (vueElement, leafletElement, props, options) => {\n  const keys = Object.keys(props);\n  for (var i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    const setMethodName = 'set' + capitalizeFirstLetter(key);\n    const deepValue = (props[key].type === Object) ||\n      (props[key].type === Array) ||\n      (Array.isArray(props[key].type));\n    if (props[key].custom) {\n      vueElement.$watch(key, (newVal, oldVal) => {\n        vueElement[setMethodName](newVal, oldVal);\n      }, {\n        deep: deepValue\n      });\n    } else if (setMethodName == 'setOptions') {\n      vueElement.$watch(key, (newVal, oldVal) => {\n        this.$leaflet().setOptions(leafletElement, newVal);\n      }, {\n        deep: deepValue\n      });\n    } else {\n      vueElement.$watch(key, (newVal, oldVal) => {\n        leafletElement[setMethodName](newVal);\n      }, {\n        deep: deepValue\n      });\n    }\n  }\n}\n","/**\n * \n */\n\nconst isBrowser = typeof window !== 'undefined'\n\nlet $leaflet = isBrowser ? window.leaflet : null;\n\nexport const LeafletMixin = {\n    methods: {\n        $leaflet: () => $leaflet,\n        $loadLeaflet: () => {\n            if (isBrowser && !$leaflet) {\n                $leaflet = require('leaflet');\n            }\n\n            return Promise.resolve($leaflet);\n        }\n    }\n}\n"],"names":["firstVueParent","found","undefined","mapObject","$parent","vueElement","leafletElement","props","options","keys","Object","string","key","i","setMethodName","charAt","toUpperCase","slice","deepValue","type","Array","isArray","custom","$watch","newVal","oldVal","deep","_this","$leaflet","setOptions","length","isBrowser","window","leaflet","LeafletMixin","methods","$loadLeaflet","require","Promise","resolve"],"mappings":"6MAAgBA,WACVC,GAAQ,GACJA,QAC0BC,GAA5BF,EAAeG,UACjBH,EAAiBA,EAAeI,QAEhCH,GAAQ,SAGLD,2BCLOK,EAAYC,EAAgBC,EAAOC,WAC3CC,EAAOC,OAAOD,KAAKF,oBALII,EAOrBC,EAAMH,EAAKI,GACXC,EAAgB,QARKH,EAQyBC,GAPxCG,OAAO,GAAGC,cAAgBL,EAAOM,MAAM,IAQ7CC,EAAaX,EAAMK,GAAKO,OAAST,QACpCH,EAAMK,GAAKO,OAASC,OACpBA,MAAMC,QAAQd,EAAMK,GAAKO,MACxBZ,EAAMK,GAAKU,OACbjB,EAAWkB,OAAOX,EAAK,SAACY,EAAQC,GAC9BpB,EAAWS,GAAeU,EAAQC,KAElCC,KAAMR,IAEkB,cAAjBJ,EACTT,EAAWkB,OAAOX,EAAK,SAACY,EAAQC,GAC9BE,EAAKC,WAAWC,WAAWvB,EAAgBkB,KAE3CE,KAAMR,IAGRb,EAAWkB,OAAOX,EAAK,SAACY,EAAQC,GAC9BnB,EAAeQ,GAAeU,KAE9BE,KAAMR,KAtBHL,EAAI,EAAGA,EAAIJ,EAAKqB,OAAQjB,SCF7BkB,EAA8B,oBAAXC,OAErBJ,EAAWG,EAAYC,OAAOC,QAAU,KAE/BC,GACTC,SACIP,SAAU,kBAAMA,GAChBQ,aAAc,kBACNL,IAAcH,IACdA,EAAWS,QAAQ,YAGhBC,QAAQC,QAAQX"}